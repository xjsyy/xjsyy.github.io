<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on  YYC＇S Blog</title>
    <link>https://xjsyy.github.io/articles/</link>
    <description>Recent content in Articles on  YYC＇S Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://xjsyy.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://xjsyy.github.io/articles/cn-physical-layer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/cn-physical-layer/</guid>
      <description>一.基本概念 1.作用:屏蔽掉传输媒体和通信手段的差异,用于物理层的协议也叫物理层的规程
二.数据通信 **1.数据通信系统:**源系统(源点/发送器/接收器/终点)-传输系统-目的系统.
2.名词解释:
​	(1):数据-运送消息的载体. ​	(2):信号-数据的电气或电磁表现, ​	(3):模拟信号-消息的参数的取值是连续的, ​	**(4):**数字信号-&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;..离散的.
**3.信道:**单向通信-双向交替通信-双向同时通信.
**4.基带信号:**来自信源的信号.仅对波形进行变换称为基带调制(编码)；使用载波将频率调高成为带通调制(调幅/调频/调相).
5.信道的极限容量: ​	**(1)奈式准则:**在带宽为W的低通信道中,码元的最高传输速率为2W,若超过此上限,会产生严重的码间干扰. ​	**(2)信噪比:**信号的平均功率与噪声的平均功率之比,10lg(S/N) ​	**(3)香农公式:**极限传输速率C = W log2(1+S/N) (bit/s).启示:让每一个码元携带更多的信息量.</description>
    </item>
    
    <item>
      <title>Bulid and Deploy</title>
      <link>https://xjsyy.github.io/articles/bulid-and-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/bulid-and-deploy/</guid>
      <description>Bulid and Deploy 本博客在linux系统上用Hugo和Github Pages搭建,下面是参考步骤．
第一步，建一个Ｇithub仓库 。 仓库命名为 username.github.io
第二步，安装Hugo 。 sudo apt-get update sudo apt-get install hugo 第三步，新建一个Hugo网站 。 hugo new site yyc-blog #&amp;#39;yyc-blog&amp;#39;是我的网站名字 第四步，选择一个Hugo主题并克隆 。  打开Hugo Themes页面，选择一个你喜欢的主题。 将所选主题克隆至本地目录。  cd yyc-blog # 进入网站目录，用你的网站目录名替换 &amp;#34;yyc-blog&amp;#34;。 mkdir -p themes # 创建 &amp;#34;themes&amp;#34; 目录。 cd themes # 进入 &amp;#34;themes&amp;#34; 目录。 git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git tranquilpeak # 将 Tranquilpeak 主题克隆至 &amp;#34;tranquilpeak&amp;#34; 目录。 第五步：编辑配置文件 。   在 Hugo 网站文件夹的根目录下，使用 Visual Studio Code 打开config.</description>
    </item>
    
    <item>
      <title>Git branch</title>
      <link>https://xjsyy.github.io/articles/git-process-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/git-process-test/</guid>
      <description>创建分支: git branch test　＃以&amp;#34;test&amp;#34;分支为例子 切换分支 git checkout test 合并分支 如果你想要把test分支合并到master分支：
git checkout master #先切换回master分支 git merge test #合并操作 如果你想在合并后把原来的分支删除： git branch -d test	#删除本地分支 git push origin --delete test	#删除远程分支 </description>
    </item>
    
    <item>
      <title>github ssh public key</title>
      <link>https://xjsyy.github.io/articles/ssh-public-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/ssh-public-key/</guid>
      <description>ssh-keygen -t ed25519 -C &amp;#34;xxxxx@xxxxx.com&amp;#34; #一般填自己的邮箱 按照提示完成三次回车，即可生成 ssh key。
查看公钥
cat ~/.ssh/id_ed25519.pub 然后将内容复制到setting-&amp;gt;SSH and GPG keys-&amp;gt;New SSH key.</description>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://xjsyy.github.io/articles/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/http/</guid>
      <description>特点  无状态响应，多次请求之间不可共享数据 速度快 基于TCP，面向连接，安全  请求协议 格式 请求行——请求头（名字：值）——请求体（POST特有）
响应协议 响应行——响应头（名字：值）——响应体（POST特有）
状态码 1xx：响应中，临时，
2xx：已成功
3xx：重定向
4xx：客户端错误，不存在的资源，无权限
5xx：服务器错误
 状态码大全
HTTP协议 </description>
    </item>
    
    <item>
      <title>JS DOM</title>
      <link>https://xjsyy.github.io/articles/js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/js/</guid>
      <description>DOM 当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。
 常用DOM //向网页输出内容 document.getElementById(&amp;#34;demo&amp;#34;).innerHTML=&amp;#34;你好 Dolly&amp;#34;; document.write(&amp;#34;你好世界!&amp;#34;); var y=x.getElementsByTagName(&amp;#34;p&amp;#34;); document.getElementById(&amp;#34;image&amp;#34;).src=&amp;#34;landscape.jpg&amp;#34;; //改变css document.getElementById(&amp;#34;p2&amp;#34;).style.color=&amp;#34;blue&amp;#34;; document.getElementById(&amp;#34;p2&amp;#34;).style.fontFamily=&amp;#34;Arial&amp;#34;; document.getElementById(&amp;#34;p2&amp;#34;).style.fontSize=&amp;#34;larger&amp;#34;; //使用 HTML DOM 来分配事件 document.getElementById(&amp;#34;myBtn&amp;#34;).onclick=function(){displayDate()}; //监听事件 document.getElementById(&amp;#34;myBtn&amp;#34;).addEventListener(&amp;#34;click&amp;#34;, displayDate); function displayDate() { document.getElementById(&amp;#34;demo&amp;#34;).innerHTML = Date(); } //参数为函数 document.getElementById(&amp;#34;myBtn&amp;#34;).addEventListener(&amp;#34;click&amp;#34;, function() { myFunction(p1, p2); }); function myFunction(a, b) { var result = a * b; document.getElementById(&amp;#34;demo&amp;#34;).innerHTML = result; } 以下代码是用于创建 &amp;lt;p&amp;gt; 元素: var para = document.createElement(&amp;#34;p&amp;#34;); 为 &amp;lt;p&amp;gt; 元素创建一个新的文本节点： var node = document.createTextNode(&amp;#34;这是一个新的段落。&amp;#34;); 将文本节点添加到 &amp;lt;p&amp;gt; 元素中： para.</description>
    </item>
    
    <item>
      <title>linux learn</title>
      <link>https://xjsyy.github.io/articles/linux-learn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/linux-learn/</guid>
      <description>sudo:&amp;ldquo;super user do&amp;quot;something.
missing:~$ ls -l /home drwxr-xr-x 1 missing users 4096 Jun 15 2019 missing r:read	w:write	x:execute这条命令指出了　用户(missing)/用户组(user)/其他人　对该文件的使用权限．－表示无权限
Vim 移动  基本移动: hjkl （左， 下， 上， 右） 词： w （下一个词）， b （词初）， e （词尾） 行： 0 （行初）， ^ （第一个非空格字符）， $ （行尾） 屏幕： H （屏幕首行）， M （屏幕中间）， L （屏幕底部） 翻页： Ctrl-u （上翻）， Ctrl-d （下翻） 文件： gg （文件头）， G （文件尾） 行数： :{行数}&amp;lt;CR&amp;gt; 或者 {行数}G ({行数}为行数) 杂项： % （找到配对，比如括号或者 /* */ 之类的注释对） 查找： f{字符},t{字符} ,F{字符},T{字符}  查找/到 向前/向后 在本行的{字符} , / ; 用于导航匹配   搜索: /{正则表达式}, n / N 用于导航匹配  </description>
    </item>
    
    <item>
      <title>Surprise Surprise</title>
      <link>https://xjsyy.github.io/articles/article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/article/</guid>
      <description>Thank you for your support! Hello. If you like this template, I&amp;rsquo;d be happy to get a coffee donation :)
 thank you!   </description>
    </item>
    
    <item>
      <title>VScode configure</title>
      <link>https://xjsyy.github.io/articles/vscode-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/vscode-config/</guid>
      <description>本配置仅能 运行 C/C++程序，不具有Debug功能
 插件
    setting
 Setting &amp;mdash;&amp;gt; Extensions &amp;ndash;&amp;gt; Run code configuration: select Run In terminal</description>
    </item>
    
  </channel>
</rss>
