<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on  YYC＇S Blog</title>
    <link>https://xjsyy.github.io/articles/</link>
    <description>Recent content in Articles on  YYC＇S Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://xjsyy.github.io/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://xjsyy.github.io/articles/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/config/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bulid and Deploy</title>
      <link>https://xjsyy.github.io/articles/bulid-and-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/bulid-and-deploy/</guid>
      <description>Bulid and Deploy 本博客在linux系统上用Hugo和Github Pages搭建,下面是参考步骤．
第一步，建一个Ｇithub仓库 。 仓库命名为 username.github.io
第二步，安装Hugo 。 sudo apt-get update sudo apt-get install hugo 第三步，新建一个Hugo网站 。 hugo new site yyc-blog #&amp;#39;yyc-blog&amp;#39;是我的网站名字 第四步，选择一个Hugo主题并克隆 。  打开Hugo Themes页面，选择一个你喜欢的主题。 将所选主题克隆至本地目录。  cd yyc-blog # 进入网站目录，用你的网站目录名替换 &amp;#34;yyc-blog&amp;#34;。 mkdir -p themes # 创建 &amp;#34;themes&amp;#34; 目录。 cd themes # 进入 &amp;#34;themes&amp;#34; 目录。 git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git tranquilpeak # 将 Tranquilpeak 主题克隆至 &amp;#34;tranquilpeak&amp;#34; 目录。 第五步：编辑配置文件 。   在 Hugo 网站文件夹的根目录下，使用 Visual Studio Code 打开config.</description>
    </item>
    
    <item>
      <title>Laravel__Basic Routing</title>
      <link>https://xjsyy.github.io/articles/sarticle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/sarticle/</guid>
      <description>Basic Routing accepting a URI and a closure ,and defining routes and behavior
use Illuminate\Support\Facades\Route; Route::get(&amp;#39;/greeting&amp;#39;, function () { return &amp;#39;Hello World&amp;#39;; }); The Default Route Files you will begin by defining routes in your routes/web.php file. The routes defined in routes/web.php may be accessed by entering the defined route&amp;rsquo;s URL in your browser
use App\Http\Controllers\UserController; Route::get(&amp;#39;/user&amp;#39;, [UserController::class, &amp;#39;index&amp;#39;]); Available Router Methods The router allows you to register routes that respond to any HTTP verb:</description>
    </item>
    
    <item>
      <title>Laravel__Controllers</title>
      <link>https://xjsyy.github.io/articles/iarticle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/iarticle/</guid>
      <description>Writing Controllers Basic Controllers Running the make:controller Artisan command to generate a controller. By default, all of the controllers for your application are stored in the app/Http/Controllers directory:
php artisan make:controller UserController an example of a basic controller
&amp;lt;?php namespace App\Http\Controllers; use App\Models\User; use Illuminate\View\View; class UserController extends Controller { /** * Show the profile for a given user. */ public function show(string $id): View { return view(&amp;#39;user.profile&amp;#39;, [ &amp;#39;user&amp;#39; =&amp;gt; User::findOrFail($id) ]); } } Once you have written a controller class and method, you may define a route to the controller method like so:</description>
    </item>
    
    <item>
      <title>Laravel__CSRF Protection</title>
      <link>https://xjsyy.github.io/articles/farticle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/farticle/</guid>
      <description>Cross-site request forgeries are a type of malicious exploit whereby unauthorized commands are performed on behalf of an authenticated user.
Preventing CSRF Requests Laravel automatically generates a CSRF &amp;ldquo;token&amp;rdquo; for each active user session managed by the application. CHANGE AND REGENERATE
use Illuminate\Http\Request; Route::get(&amp;#39;/token&amp;#39;, function (Request $request) { $token = $request-&amp;gt;session()-&amp;gt;token(); $token = csrf_token(); // ... }); a hidden CSRF _token field in the form so that the CSRF protection middleware can validate the request.</description>
    </item>
    
    <item>
      <title>Laravel__Middleware</title>
      <link>https://xjsyy.github.io/articles/tarticle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/tarticle/</guid>
      <description>Laravel includes a middleware that verifies the user of your application is authenticated. If the user is not authenticated, the middleware will redirect the user to your application&amp;rsquo;s login screen. However, if the user is authenticated, the middleware will allow the request to proceed further into the application.
&amp;lt;?php namespace App\Http\Middleware; use Closure; use Illuminate\Http\Request; use Symfony\Component\HttpFoundation\Response; class EnsureTokenIsValid { /** * Handle an incoming request. * * @param \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response) $next */ public function handle(Request $request, Closure $next): Response { if ($request-&amp;gt;input(&amp;#39;token&amp;#39;) !</description>
    </item>
    
    <item>
      <title>Laravel__Request</title>
      <link>https://xjsyy.github.io/articles/laravel_request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/laravel_request/</guid>
      <description>provides an object-oriented way o interact with the current HTTP request being handled by your application as well as retrieve the input, cookies, and files that were submitted with the request.
Interacting With The Request Accessing The Request To obtain an instance of the current HTTP request via dependency injection, you should type-hint the Illuminate\Http\Request class on your route closure or controller method. The incoming request instance will automatically be injected by the Laravel service container:</description>
    </item>
    
    <item>
      <title>OS</title>
      <link>https://xjsyy.github.io/articles/os-experiment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/os-experiment/</guid>
      <description>#include &amp;lt;pthread.h&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;// #include &amp;lt;sys/syscall.h&amp;gt; int s=0; int count=0; void *first(void *arg); void *second(void *arg); int main(int arg,int argc[]){ pthread_t aa,bb; pthread_create(&amp;amp;aa,NULL,first,NULL); pthread_create(&amp;amp;bb,NULL,second,NULL); pthread_join(aa,NULL); pthread_join(bb,NULL); return 0; } void *first(void *arg){ printf(&amp;#34;process id:%d and thread tid:%d\n&amp;#34;,getpid(),pthread_self()); while(1){ int a; scanf(&amp;#34;%d&amp;#34;,&amp;amp;a); if(a%2==0){ count++; }else{ s=1; break; } } return NULL; } void *second(void *arg){ while(1){ if(s){ printf(&amp;#34;%d\n&amp;#34;,count); break; } } return NULL; } </description>
    </item>
    
    <item>
      <title>Surprise Surprise</title>
      <link>https://xjsyy.github.io/articles/article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/article/</guid>
      <description>Thank you for your support! Hello. If you like this template, I&amp;rsquo;d be happy to get a coffee donation :)
 thank you!   </description>
    </item>
    
    <item>
      <title>VScode configure</title>
      <link>https://xjsyy.github.io/articles/vscode-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xjsyy.github.io/articles/vscode-config/</guid>
      <description>插件
  setting
 Setting &amp;mdash;&amp;gt; Extensions &amp;ndash;&amp;gt; Run code configuration: select Run In terminal</description>
    </item>
    
  </channel>
</rss>
